/*
 * generated by Xtext
 */
package de.nordakademie.ticket.ui.quickfix

import de.nordakademie.ticket.ticket.Date
import de.nordakademie.ticket.ticket.Field
import de.nordakademie.ticket.ticket.IssueScreen
import de.nordakademie.ticket.ticket.IssueType
import de.nordakademie.ticket.ticket.ModelIssue
import de.nordakademie.ticket.ticket.Person
import de.nordakademie.ticket.ticket.Role
import de.nordakademie.ticket.ticket.Workflow
import de.nordakademie.ticket.validation.TicketValidator
import java.util.ArrayList
import java.util.Calendar
import java.util.List
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import de.nordakademie.ticket.ticket.Transition
import de.nordakademie.ticket.ticket.Status
import org.eclipse.emf.common.util.EList
import de.nordakademie.ticket.ticket.ComboField
import de.nordakademie.ticket.constantsAndNames.Constants
import de.nordakademie.ticket.constantsAndNames.Names_EN

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#quick-fixes
 */
class TicketQuickfixProvider extends DefaultQuickfixProvider implements Constants
	, Names_EN
//	, Names_DE
{


@Fix(TicketValidator.EMPTY_STRING)
def fillString(Issue issue, IssueResolutionAcceptor acceptor){
	val String emptyElement 		= issue.data.get(0)
	val String emptyElementShown 	= issue.data.get(1)
	val String newString 			= issue.data.get(2)
	acceptor.accept(issue, 
		M_FILL_EMPTY_ELEMENT_1 + emptyElementShown, 
		M_FILL_EMPTY_ELEMENT_1 + emptyElementShown + M_FILL_EMPTY_ELEMENT_2 + 
			KEY_APOST + newString + KEY_APOST , 
		KEY_EMPTY,
		[
			element, 
			context |
				switch (true) {
				case element instanceof Field:
					switch (emptyElement){
					case DESCRIPTION:
						(element as Field).description = newString
					case ENTRY:
						if (element instanceof ComboField){
							var i = -1
							for (String string : (element as ComboField).^default){
								i++
								if (string.empty){
									(element as ComboField).^default.set(i, newString)
								}
							}
						}
					case DEFAULT_ENTRIES:
						if (element instanceof ComboField){
							(element as ComboField).^default.add(newString)
						}
					}
				case element instanceof Transition:
					(element as Transition).title = newString
				case element instanceof Person:
					(element as Person).shownName = newString
				}
		]
	)
}


@Fix(TicketValidator.EMPTY_ROLE)
def setOpenIssue(Issue issue, IssueResolutionAcceptor acceptor){
	val String role = issue.data.get(0)
	acceptor.accept(issue, 
		M_ALLOW_NEW_ISSUE_SHORT, 
		M_ALLOW_NEW_ISSUE_LONG + KEY_APOST + role + KEY_APOST , 
		KEY_EMPTY,
		[
			element, 
			context | 
				(element as Role).openIssue = true
		]
	)
}


@Fix(TicketValidator.EMPTY_ROLE)
def addTransitionToRole(Issue issue, IssueResolutionAcceptor acceptor){
	val String role = issue.data.get(0)
	acceptor.accept(issue, 
		M_ADD_ROLE_TRANSITION_SHORT, 
		M_ADD_ROLE_TRANSITION_LONG + KEY_APOST + role + KEY_APOST , 
		'',
		[
			element, 
			context | 
				(element as Role).transitions.add(
					(element.eContainer as ModelIssue).transition.get(0)
				)
		]
	)
}


@Fix(TicketValidator.DUPLICATED_TRANSITION_STATUS)
def changeStatus(Issue issue, IssueResolutionAcceptor acceptor){
	val String status = issue.data.get(0)
	acceptor.accept(issue, 
		M_CHANGE_TRANSITION_SHORT, 
		M_CHANGE_TRANSITION_LONG + KEY_APOST + status + KEY_APOST ,  
		KEY_EMPTY,
		[
			element, 
			context | 
				var EList<Status> statuus = (element.eContainer as ModelIssue).status;
				(element as Transition).ziel = statuus.get(statuus.size)
				
		]
	)
}


@Fix(TicketValidator.INVALID_DAY)
def changeToFirstDay(Issue issue, IssueResolutionAcceptor acceptor){
	val String dateElement = issue.data.get(0)
	acceptor.accept(issue, 
		M_DAY_TO_FIRST_SHORT, 
		M_DAY_TO_FIRST_LONG_1 + dateElement + M_DAY_TO_FIRST_LONG_2, 
		KEY_EMPTY,
		[
			element, 
			context | 
				(element as Date).day = 1
		]
	)
}


@Fix(TicketValidator.INVALID_MONTH)
def changeToJan(Issue issue, IssueResolutionAcceptor acceptor){
	val String dateElement = issue.data.get(0)
	acceptor.accept(issue, 
		M_MONTH_TO_SHORT + S_JANUARY, 
		M_MONTH_TO_LONG_1 + dateElement + M_MONTH_TO_LONG_2 + S_JANUARY, 
		KEY_EMPTY,
		[
			element, 
			context | 
				(element as Date).month = 1
		]
	)
}

@Fix(TicketValidator.INVALID_MONTH)
def changeToFeb(Issue issue, IssueResolutionAcceptor acceptor){
	val String dateElement = issue.data.get(0)
	acceptor.accept(issue, 
		M_MONTH_TO_SHORT + S_FEBRUARY, 
		M_MONTH_TO_LONG_1 + dateElement + M_MONTH_TO_LONG_2 + S_FEBRUARY, 
		KEY_EMPTY,
		[
			element, 
			context | 
				(element as Date).month = 2
		]
	)
}

@Fix(TicketValidator.INVALID_MONTH)
def changeToMar(Issue issue, IssueResolutionAcceptor acceptor){
	val String dateElement = issue.data.get(0)
	acceptor.accept(issue, 
		M_MONTH_TO_SHORT + S_MARCH, 
		M_MONTH_TO_LONG_1 + dateElement + M_MONTH_TO_LONG_2 + S_MARCH, 
		KEY_EMPTY,
		[
			element, 
			context | 
				(element as Date).month = 3
		]
	)
}

@Fix(TicketValidator.INVALID_MONTH)
def changeToApr(Issue issue, IssueResolutionAcceptor acceptor){
	val String dateElement = issue.data.get(0)
	acceptor.accept(issue, 
		M_MONTH_TO_SHORT + S_APRIL, 
		M_MONTH_TO_LONG_1 + dateElement + M_MONTH_TO_LONG_2 + S_APRIL, 
		KEY_EMPTY,
		[
			element, 
			context | 
				(element as Date).month = 4
		]
	)
}

@Fix(TicketValidator.INVALID_MONTH)
def changeToMay(Issue issue, IssueResolutionAcceptor acceptor){
	val String dateElement = issue.data.get(0)
	acceptor.accept(issue, 
		'Switch to May', 
		"Switch month of '" + dateElement + "' to May'", 
		'',
		[
			element, 
			context | 
				(element as Date).month = 5
		]
	)
}

@Fix(TicketValidator.INVALID_MONTH)
def changeToJun(Issue issue, IssueResolutionAcceptor acceptor){
	val String dateElement = issue.data.get(0)
	acceptor.accept(issue, 
		M_MONTH_TO_SHORT + S_JUNE, 
		M_MONTH_TO_LONG_1 + dateElement + M_MONTH_TO_LONG_2 + S_JUNE, 
		KEY_EMPTY,
		[
			element, 
			context | 
				(element as Date).month = 6
		]
	)
}

@Fix(TicketValidator.INVALID_MONTH)
def changeToJul(Issue issue, IssueResolutionAcceptor acceptor){
	val String dateElement = issue.data.get(0)
	acceptor.accept(issue, 
		M_MONTH_TO_SHORT + S_JULY, 
		M_MONTH_TO_LONG_1 + dateElement + M_MONTH_TO_LONG_2 + S_JULY, 
		KEY_EMPTY,
		[
			element, 
			context | 
				(element as Date).month = 7
		]
	)
}

@Fix(TicketValidator.INVALID_MONTH)
def changeToAug(Issue issue, IssueResolutionAcceptor acceptor){
	val String dateElement = issue.data.get(0)
	acceptor.accept(issue, 
		M_MONTH_TO_SHORT + S_AUGUST, 
		M_MONTH_TO_LONG_1 + dateElement + M_MONTH_TO_LONG_2 + S_AUGUST, 
		KEY_EMPTY,
		[
			element, 
			context | 
				(element as Date).month = 8
		]
	)
}

@Fix(TicketValidator.INVALID_MONTH)
def changeToSep(Issue issue, IssueResolutionAcceptor acceptor){
	val String dateElement = issue.data.get(0)
	acceptor.accept(issue, 
		M_MONTH_TO_SHORT + S_SEPTEMBER, 
		M_MONTH_TO_LONG_1 + dateElement + M_MONTH_TO_LONG_2 + S_SEPTEMBER, 
		KEY_EMPTY,
		[
			element, 
			context | 
				(element as Date).month = 9
		]
	)
}

@Fix(TicketValidator.INVALID_MONTH)
def changeToOct(Issue issue, IssueResolutionAcceptor acceptor){
	val String dateElement = issue.data.get(0)
	acceptor.accept(issue, 
		M_MONTH_TO_SHORT + S_OCTOBER, 
		M_MONTH_TO_LONG_1 + dateElement + M_MONTH_TO_LONG_2 + S_OCTOBER, 
		KEY_EMPTY,
		[
			element, 
			context | 
				(element as Date).month = 10
		]
	)
}

@Fix(TicketValidator.INVALID_MONTH)
def changeToNov(Issue issue, IssueResolutionAcceptor acceptor){
	val String dateElement = issue.data.get(0)
	acceptor.accept(issue, 
		M_MONTH_TO_SHORT + S_NOVEMBER, 
		M_MONTH_TO_LONG_1 + dateElement + M_MONTH_TO_LONG_2 + S_NOVEMBER, 
		KEY_EMPTY,
		[
			element, 
			context | 
				(element as Date).month = 11
		]
	)
}

@Fix(TicketValidator.INVALID_MONTH)
def changeToDec(Issue issue, IssueResolutionAcceptor acceptor){
	val String dateElement = issue.data.get(0)
	acceptor.accept(issue, 
		M_MONTH_TO_SHORT + S_DECEMBER, 
		M_MONTH_TO_LONG_1 + dateElement + M_MONTH_TO_LONG_2 + S_DECEMBER, 
		KEY_EMPTY,
		[
			element, 
			context | 
				(element as Date).month = 12
		]
	)
}

@Fix(TicketValidator.INVALID_YEAR)
def changeToLast(Issue issue, IssueResolutionAcceptor acceptor){
	val String dateElement = issue.data.get(0)
	acceptor.accept(issue, 
		M_YEAR_TO_SHORT + C_LAST_YEAR, 
		M_YEAR_TO_LONG_1 + dateElement + M_YEAR_TO_LONG_2 + C_LAST_YEAR, 
		KEY_EMPTY,
		[
			element, 
			context | 
				(element as Date).year = C_LAST_YEAR
		]
	)
}


@Fix(TicketValidator.INVALID_YEAR)
def changeToThisYear(Issue issue, IssueResolutionAcceptor acceptor){
	val String dateElement = issue.data.get(0)
	val actualYear = Calendar.getInstance().get(Calendar.YEAR);
	acceptor.accept(issue, 
		M_YEAR_TO_SHORT + actualYear,
		M_YEAR_TO_LONG_1 + dateElement + M_YEAR_TO_LONG_2 + actualYear, 
		KEY_EMPTY,
		[
			element, 
			context | 
				(element as Date).year = Calendar.getInstance().get(Calendar.YEAR)		
		]
	)
}



@Fix(TicketValidator.ELEMENT_CONTAINS_LIST_WITH_DUPLICATES)
def removeTransition(Issue issue, IssueResolutionAcceptor acceptor){
	val String parentElement 		= issue.data.get(0)
	val String duplicatedElement 	= issue.data.get(1)
	acceptor.accept(issue, 
		M_REMOVE_DUPLICATES_SHORT, 
		M_REMOVE_DUPLICATES_LONG_1 + duplicatedElement + M_REMOVE_DUPLICATES_LONG_1 + 
			KEY_APOST + parentElement + KEY_APOST, 
		KEY_EMPTY,
		[
			element, 
			context |
				switch true {
				case element instanceof Workflow: 
					(element as Workflow).transitions.removeAllDuplicates()
				case element instanceof Role:
					(element as Role).transitions.removeAllDuplicates()
				case element instanceof Person:
					(element as Person).roles.removeAllDuplicates()
				case element instanceof IssueType:
					(element as IssueType).fields.removeAllDuplicates()
				case element instanceof IssueScreen:
					(element as IssueScreen).fields.removeAllDuplicates()
				case element instanceof ComboField:
					(element as ComboField).^default.removeAllDuplicates()
				}
		]
	)
}



def removeAllDuplicates (List<?> list){
	var List<Object> checkList = new ArrayList<Object>
	var int i;
	var Object element;

	for (i = list.size - 1;  i >= 0;  i--) {
		element = list.get(i);
		if (checkList.contains(element)){
			list.remove(i)
		} else {	
			checkList.add(element)
		}
	}
}

}
